#! /usr/bin/ruby

# CS Commons helper script.
# Provides useful automation for creation and maintenance of
# CS Commons sites and artifacts.

require 'readline'
require 'json'

MASTER_SITE = "https://raw.githubusercontent.com/cs-commons/template-site/master"

# Metadata required by both artifacts and sites
REQUIRED_COMMON_METADATA = {
	'repo_git_url' => 'Git repository URL',
	'repo_pub_url' => 'Public URL of Git repository',
}

# Required site metadata entries (and descriptions)
REQUIRED_SITE_METADATA = {
	'site_url' => 'URL where site will be hosted',
	'title' => 'Title to display on index page',
}
REQUIRED_SITE_METADATA.merge!(REQUIRED_COMMON_METADATA)

GITHUB_URL_RE = /^git@github.com:([^\/]+)\/([^\/]+)(\.git)?$/

# Of the creative commons licenses, we don't predefine
# any of the no-derivs variants, since CS Commons by definition
# allows users to customize the content for their site,
# violating the "unchanged and in whole" restriction.
LICENSES = [
	{
		'shortname' => 'CC BY 4.0',
		'fullname' => 'Creative Commons Attribution 4.0',
		'website' => 'https://creativecommons.org/licenses/by/4.0'
	},
	{
		'shortname' => 'CC BY-SA 4.0',
		'fullname' => 'Creative Commons Attribution-ShareAlike 4.0',
		'website' => 'https://creativecommons.org/licenses/by-sa/4.0'
	},
	{
		'shortname' => 'CC BY-NC 4.0',
		'fullname' => 'Creative Commons Attribution-NonCommercial',
		'website' => 'https://creativecommons.org/licenses/by-nc/4.0'
	},
	{
		'shortname' => 'CC BY-NC-SA 4.0',
		'fullname' => 'Creative Commons Attribution-NonCommercial-ShareAlike 4.0',
		'website' => 'https://creativecommons.org/licenses/by-nc-sa/4.0'
	},
]

# File extensions of content files.  Files with these extensions
# are automatically added by the checkin command.
CONTENT_FILE_EXTENSIONS = [
	'md', 'html', 'json', 'js', 'css', 'yml', 'png', 'PNG', 'jpg', 'JPG', 'jpeg', 'JPEG'
]

# ----------------------------------------------------------------------
# Util class - utility functions
# ----------------------------------------------------------------------
class Util
	def self.print_usage
		puts "Usage: cs-commons <command> [args]"
	end

	def self.ask(prompt)
		buf = Readline.readline(prompt, true)
		return buf
	end

	def self.ask_yn(prompt)
		buf = Readline.readline("#{prompt} (yes/no) ", true)
		return buf.downcase == 'y' || buf.downcase == 'yes'
	end

	def self.run(*cmd)
		raise "command #{cmd[0]} failed" if !system(*cmd)
	end

	def self.run_quiet(*cmd)
		raise "command #{cmd[0]} failed" if !system(*cmd, out: '/dev/null', err: '/dev/null')
	end

	def self.mkdir(dirname)
		run('mkdir', '-p', dirname)
	end

	def self.task(message)
		print "#{message}..."
		STDOUT.flush
		yield
		puts "done"
	end

	def self.copy_template_file(dirname, template_file)
		Dir.chdir(dirname) do
			if m = /^(.*)\/[^\/]+$/.match(template_file)
				#puts "making directory: #{m[1]}"
				mkdir(m[1])
			end
			task("Copying #{template_file}") do
				run_quiet( 'wget', "#{MASTER_SITE}/#{template_file}", "--output-document=#{template_file}")
			end
		end
	end

	def self.create_file(dirname, filename, contents)
		task("Creating #{filename}") do
			File.open("#{dirname}/#{filename}", "w") do |f|
				f.print(contents)
			end
		end
	end

	def self.find_files_in(dirname, extension)
		result = []
		Dir.chdir(dirname) do
			IO.popen("find . -name '*\\.#{extension}' -print") do |io|
				io.each_line do |line|
					line.chomp!
					result.push(line[2..line.length])
				end
			end
		end
		return result
	end

	def self.is_site?
		return File.exists?('cs-commons-site.json')
	end

	def self.is_artifact?
		return File.exists?('cs-commons-artifact.json')
	end

	def self.is_github_url?(url)
		return GITHUB_URL_RE.match(url) ? true : false
	end

	def self.parse_github_url(url)
		m = GITHUB_URL_RE.match(url)
		throw "#{url} is not a GitHub url" if !m
		return [m[1], m[2]]
	end

	# Add keys from given key hash (e.g., REQUIRED_SITE_METADATA)
	# to given configuration hash if they are not already present.
	def self.add_required_keys(key_hash, config_hash)
		key_hash.keys.sort.each do |key|
			if !config_hash.has_key?(key)
				descr = key_hash[key]
				config_hash[key] = Util.ask("#{descr}: ")
			end
		end
	end

	def self.create_default_gitignore(dirname)
		create_file(dirname, ".gitignore", <<"EOF")
*.swp
*~
EOF
	end
end

# ----------------------------------------------------------------------
# Base class for commands
# ----------------------------------------------------------------------
class Command
	attr_reader :name, :args, :helptext

	def initialize(name, args, helptext)
		@name = name
		@args = args
		@helptext = helptext
	end

	@@subclasses = []
	@@commands = {}

	def self.inherited(subclass)
		#puts "Subclass #{subclass.to_s}"
		@@subclasses.push(subclass)
	end

	def self.all
		if @@commands.empty?
			@@subclasses.each do |subclass|
				cmd = subclass.new
				#puts "Adding #{cmd.name}"
				@@commands[cmd.name] = cmd
			end
		end
		return @@commands
	end
end

# ----------------------------------------------------------------------
# Command to print out help information for each command
# ----------------------------------------------------------------------
class Help < Command
	def initialize
		super("help", "", "print synopsis of each command")
	end

	def exec(args)
		Util.print_usage
		puts "Commands:"
		commands = Command.all
		commands.keys.sort.each do |command_name|
			cmd = commands[command_name]
			# TODO: nicer formatting
			puts "  #{cmd.name} #{cmd.args} #{cmd.helptext}"
		end
	end
end

# ----------------------------------------------------------------------
# Command to create a new site
# ----------------------------------------------------------------------
class CreateSite < Command
	def initialize
		super("create-site", "<sitename>", "create a new CS Commons site (e.g., for a course)")
	end

	def exec(args)
		raise "missing sitename" if args.length != 1
		sitename = args[0]

		site_meta = {}

		repo_git_url = Util.ask("#{REQUIRED_SITE_METADATA['repo_git_url']}: ")
		site_meta['repo_git_url'] = repo_git_url

		# If the git URL is at GitHub, then we can predict the
		# site URL and the repo public URL
		if Util.is_github_url?(repo_git_url)
			puts "You're using GitHub, excellent."
			github_user, github_repo = Util.parse_github_url(repo_git_url)
			site_url = "http://#{github_user}.github.io/#{github_repo}"
			repo_pub_url = "https://github.com/#{github_user}/#{github_repo}"
			puts "I predict that you will want to use the following values:"
			puts "  #{REQUIRED_SITE_METADATA['site_url']}: #{site_url}"
			puts "  #{REQUIRED_SITE_METADATA['repo_pub_url']}: #{repo_pub_url}"
			ok = Util.ask_yn("Are these values correct?")
			if ok
				site_meta['site_url'] = site_url
				site_meta['repo_pub_url'] = repo_pub_url
			end
		end

		Util.add_required_keys(REQUIRED_SITE_METADATA, site_meta)

		# Copy files from template site
		Util.mkdir(sitename)
		# FIXME: probably we should attempt to fetch the entire template site
		Util.copy_template_file(sitename, "js/cs-commons.js")
		Util.copy_template_file(sitename, "css/site.css")
		Util.copy_template_file(sitename, "_layouts/default.html")
		Util.copy_template_file(sitename, "_layouts/fragment.html")

		# Generate _config.yml
		Util.create_file(sitename, "_config.yml", <<"EOF")
url: "#{site_meta['site_url']}"
markdown: rdiscount
pygments: true
EOF

		# Generate index.md
		Util.create_file(sitename, "index.md", <<"EOF")
---
layout: default
title: "#{site_meta['title']}"
---

Welcome to the site!

There is nothing here yet.
EOF

		Util.create_default_gitignore(sitename)

		# Generate cs-commons-site.json
		site_json = JSON.fast_generate(site_meta)
		Util.create_file(sitename, "cs-commons-site.json", site_json)
	end
end

# ----------------------------------------------------------------------
# Command to create a new artifact directory.
# ----------------------------------------------------------------------
class CreateArtifact < Command
	def initialize
		super("create-artifact", "<artifact name>", "create a new CS Commons artifact (e.g., an assignment)")
	end

	def exec(args)
		raise "Please specify an artifact directory" if !(artifact_dir = args.shift)
		raise "Directory #{artifact_dir} already exists" if Dir.exists?(artifact_dir)

		# Get all required metadata
		author_name = Util.ask("Your full name: ")
		author_email = Util.ask("Your email address: ")
		author_website = Util.ask("Your website: ")
		puts "Choose a license, or enter -1 to enter your own license:"
		LICENSES.each_with_index do |license, i|
			puts "  #{i}) #{license['shortname']}"
		end
		choice = Util.ask("Which license (0..#{LICENSES.length-1}, or -1)? ").to_i
		if choice >= 0
			license = LICENSES[choice]
		else
			license = {}
			license['shortname'] = Util.ask("License short name: ")
			license['fullname'] = Util.ask("License full name: ")
			license['website'] = Util.ask("License website: ")
		end
		title = Util.ask("Artifact title: ")
		type = Util.ask("Artifact type (e.g., assignment, lab): ")
		keywords = Util.ask("Artifact keywords (separated by spaces): ")

		artifact_meta = {
			'title' => title,
			'type' => type,
			'authors' => [{ 'name' => author_name, 'email' => author_email, 'website' => author_website }],
			'license' => license,
			'keywords' => keywords.split(/\s+/),
		}

		# Get git repo URLs
		Util.add_required_keys(REQUIRED_COMMON_METADATA, artifact_meta)

		# Create artifact directory
		Util.mkdir(artifact_dir)

		# Create cs-commons-artifact.json from artifact metadata
		artifact_json = JSON.fast_generate(artifact_meta)
		Util.create_file(artifact_dir, "cs-commons-artifact.json", artifact_json)

		# Create index.md
		Util.create_file(artifact_dir, "index.md", <<"EOF")
---
layout: default
title: "#{title}"
---

TODO: add the content of this #{type} here!  Don't forget to add placeholders for local details!
EOF

		# Create README.md
		Util.create_file(artifact_dir, "README.md", <<"EOF")
---
layout: default
title: "Readme for #{title}"
---

# Synopsis

This is a CS-Commons #{type} artifact.

The author is #{author_name} &lt;#{author_email}&gt;.

This artifact is licensed using the <a href="#{license['website']}">#{license['fullname']}</a> license.

# Description

TODO: write a description of this artifact.

# Customization

TODO: describe the subsitutions and fragments the artifact supports.
EOF

		# Create .gitignore
		Util.create_default_gitignore(artifact_dir)
	end
end

# ----------------------------------------------------------------------
# Command to make a git repository for site or artifact,
# add and commit initial files, and push to remote repo.
# ----------------------------------------------------------------------
class Checkin < Command
	def initialize
		super("checkin", "", "create git repo for site or artifact, and push to remote")
	end

	def exec(args)
		if Util.is_site?
			_exec_for_site(args)
		elsif Util.is_artifact?
			_exec_for_artifact(args)
		else
			raise "This directory doesn't seem to be a CS Commons site or artifact"
		end
	end

	def _exec_for_site(args)
		site_meta = JSON.parse(IO.read('cs-commons-site.json'))

		all_files = _find_files_to_check_in(CONTENT_FILE_EXTENSIONS)

		#puts "All files:"
		#all_files.each {|filename| puts filename}
		_git_create_repo()

		Util.task("Setting default branch to gh-pages") do
			Util.run_quiet('git', 'checkout', '-b', 'gh-pages')
		end

		_git_add_files(all_files)
		_git_confirm_added_files()
		_git_commit_files()
		_git_set_origin(site_meta)
		_git_push_to_origin('gh-pages')

		if Util.is_github_url?(site_meta['repo_git_url'])
			_github_check_description_tag(site_meta)
		end
	end

	def _exec_for_artifact(args)
		artifact_meta = JSON.parse(IO.read("cs-commons-artifact.json"))

		all_files = _find_files_to_check_in(CONTENT_FILE_EXTENSIONS)

		_git_create_repo()
		_git_add_files(all_files)
		_git_confirm_added_files()
		_git_commit_files()
		_git_set_origin(artifact_meta)
		_git_push_to_origin('master')

		if Util.is_github_url?(artifact_meta['repo_git_url'])
			_github_check_description_tag(artifact_meta)
		end
	end

	def _find_files_to_check_in(extensions)
		all_files = []
		Util.task("Finding files to check in") do
			extensions.each do |ext|
				all_files.concat(Util.find_files_in('.', ext))
			end
			all_files.push('.gitignore') if File.exists?('.gitignore')
		end
		return all_files
	end

	def _git_create_repo
		Util.task("Creating empty git repository") do
			Util.run_quiet('git', 'init')
		end
	end

	def _git_add_files(all_files)
		Util.task("Adding files") do
			cmd = ['git', 'add'].concat(all_files)
			#puts "All files: #{cmd.join('|')}"
			#puts "cmd.length=#{cmd.length}"
			Util.run_quiet(*cmd)
		end
	end

	def _git_confirm_added_files
		puts "Running git status to confirm files to be added:"
		Util.run('git', 'status')

		puts "If you want to make adjustments to the files to be added,"
		puts "I can run a shell for you."
		if Util.ask_yn("Would you like to start a shell?")
			puts "Starting a shell.  Exit the shell when you are ready to commit"
			puts "files to the repository."
			Util.run(ENV['SHELL'])
		end
	end

	def _git_commit_files
		Util.task("Committing files") do
			Util.run_quiet('git', 'commit', '-mInitial checkin')
		end
	end

	def _git_set_origin(meta)
		Util.task("Setting origin") do
			Util.run_quiet('git', 'remote', 'add', 'origin', meta['repo_git_url'])
		end
	end

	def _git_push_to_origin(branch)
		Util.task("Pushing to origin") do
			Util.run_quiet('git', 'push', '-u', 'origin', branch)
		end
	end

	
	def _github_check_description_tag(meta)
		tag_found = false
		repo_git_url = meta['repo_git_url']
		github_user, github_repo = Util.parse_github_url(repo_git_url)
		Util.task("Checking repository description for (cs commons) tag") do
			repo_metadata_url = "https://api.github.com/repos/#{github_user}/#{github_repo}"
			IO.popen("wget -q --output-document=- '#{repo_metadata_url}'") do |fh|
				repo_meta = JSON.parse(fh.read)
				tag_found = repo_meta.has_key?('description') && repo_meta['description'].include?('(cs commons)')
			end
		end
		if !tag_found
			puts <<"EOF"
>>> WARNING! <<<

Your repository description does not contain the text '(cs commons)'.
Please add this text to the repository description.  Without this
text, your site or artifact won't be found in searches for
CS Commons content.  By adding this text, you are making it easy
for other people to find and reuse your content, which is the
whole point of CS Commons!

To edit the description, visit the URL

  https://github.com/#{github_user}/#{github_repo}

and click the "Edit" link just below the name of the repository.
Just add the text

  (cs commons)

anywhere in the description.
EOF
		end
	end
end

# ----------------------------------------------------------------------
# Function to print usage information
# ----------------------------------------------------------------------
def usage
	print <<"EOF"
EOF
	exit(1)
end

# ----------------------------------------------------------------------
# Main code - figure out which command was requested and execute it
# ----------------------------------------------------------------------
if ARGV.length == 0
	Util.print_usage
	puts "Run \"cs-commons help\" for more information\"."
	exit(1)
end

command_name = ARGV.shift
#puts "#{command_name}"

if !Command.all.has_key?(command_name)
	puts "Unknown command #{command_name}"
	Command.all['help'].exec(ARGV)
	exit(1)
end

begin
	Command.all[command_name].exec(ARGV)
rescue Exception => e
	puts "Error: #{e}"
	puts e.backtrace
	exit(1)
end

# vim:ts=2:
