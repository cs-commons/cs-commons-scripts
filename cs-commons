#! /usr/bin/ruby

# cs-commons helper script.
# Provides useful automation for creation and maintenance of
# cs-commons sites and artifacts.

require 'readline'

class Util
	def self.ask(prompt)
		buf = Readline.readline(prompt, true)
		return buf
	end

	def self.run(*cmd)
		raise "command #{cmd[0]} failed" if !system(*cmd)
	end

	def self.run_quiet(*cmd)
		raise "command #{cmd[0]} failed" if !system(*cmd, out: '/dev/null', err: '/dev/null')
	end

	def self.mkdir(dirname)
		run('mkdir', '-p', dirname)
	end

	def self.copy_template_file(dirname, template_file)
		Dir.chdir(dirname) do
			if m = /^(.*)\/[^\/]+$/.match(template_file)
				#puts "making directory: #{m[1]}"
				mkdir(m[1])
			end
			print "Copying #{template_file}..."
			STDOUT.flush
			run_quiet(
				'wget',
				"https://raw.githubusercontent.com/cs-commons/template-site/master/#{template_file}",
				"--output-document=#{template_file}"
			)
			puts "done"
		end
	end
end

class Command
	attr_reader :name, :args, :helptext

	def initialize(name, args, helptext)
		@name = name
		@args = args
		@helptext = helptext
	end

	@@commands = {}

	def self.add(cmd)
		@@commands[cmd.name] = cmd
	end

	def self.all
		@@commands
	end
end

class Help < Command
	def initialize
		super("help", "", "print synopsis of each command")
	end

	def exec(args)
		puts "Commands:"
		commands = Command.all
		commands.keys.sort.each do |command_name|
			cmd = commands[command_name]
			# TODO: nicer formatting
			puts "  #{cmd.name} #{cmd.args} #{cmd.helptext}"
		end
	end
end

# Command to create a new site
class CreateSite < Command
	def initialize
		super("create-site", "<sitename>", "create a new cs-commons site (e.g., for a course)")
	end

	def exec(args)
		raise "missing sitename" if args.length != 1
		sitename = args[0]
		siteurl = Util.ask("URL where site will be hosted: ")

		Util.mkdir(sitename)
		# FIXME: probably we should attempt to fetch the entire template site
		Util.copy_template_file(sitename, "js/cs-commons.js")
		Util.copy_template_file(sitename, "css/site.css")
		Util.copy_template_file(sitename, "_layouts/default.html")
		Util.copy_template_file(sitename, "_layouts/fragment.html")

		# Generate _config.yml
		print "Creating _config.yml..."
		STDOUT.flush
		File.open("#{sitename}/_config.yml", "w") do |f|
			f.print <<"EOF"
url: "#{siteurl}"

markdown: rdiscount

pygments: true
EOF
		end
		puts "done"
	end
end

Command.add(Help.new)
Command.add(CreateSite.new)

def usage
	print <<"EOF"
Usage: cs-commons <command> [args]
Run "cs-commons help" for more information".
EOF
	exit(1)
end

usage if ARGV.length == 0

command_name = ARGV.shift
#puts "#{command_name}"

usage if !Command.all.has_key?(command_name)

begin
	Command.all[command_name].exec(ARGV)
rescue Exception => e
	puts "Error: #{e}"
	puts e.backtrace
	exit(1)
end

# vim:ts=2:
